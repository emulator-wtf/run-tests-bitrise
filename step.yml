#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  Run instrumentation tests
summary: |
  Run your Android UI tests with [emulator.wtf](https://emulator.wtf).
description: |
  Run your Android UI tests with [emulator.wtf](https://emulator.wtf).

  Emulator.wtf is an Android cloud emulator laser-focused on performance to deliver quick feedback to your PRs.

  It's like Firebase Test Lab on steroids (2-4x speedup, depending on your specific setup)
website: https://emulator.wtf
source_code_url: https://github.com/emulator-wtf/run-tests-bitrise
support_url: https://github.com/emulator-wtf/run-tests-bitrise/issues
host_os_tags:
  - osx-10.10
  - ubuntu-16.04

# If this step should be available only for certain project types
# just uncomment this `project_type_tags` section and include all the
# project types supported by the step. If the step can be used for all
# project types then you can just remove this section.
# If no `project_type_tags` specified (or specified as an empty array)
# that means the step can be used for any project type.
# You can find more information about project type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
#
project_type_tags:
  #   - ios
  #   - macos
  - android
#   - xamarin
#   - react-native
#   - cordova
#   - ionic

# Type tags are used for categorizing steps, for easier step discovery in Step Libraries.
# You can find more information about type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
type_tags:
  - test

is_requires_admin_user: true
is_always_run: false
is_skippable: false
run_if: ""

deps:
  brew:
    - name: curl
  apt_get:
    - name: curl


toolkit:
  bash:
    entry_file: step.sh

inputs:
  - token:
    opts:
      title: "emulator.wtf API Token"
      is_expand: true
      is_sensitive: true
      is_required: true
  - app: $BITRISE_APK_PATH
    opts:
      title: "APK path"
      summary: "The path to the APK to test."
      description: |
        The path to the APK to test.

        When you run the [android-build](https://www.bitrise.io/integrations/steps/android-build) or [android-build-for-ui-testing](https://bitrise.io/integrations/steps/android-build-for-ui-testing) Step before this Step, then the generated APK path is exported under the `$BITRISE_APK_PATH` environment variable.
      is_expand: true
      is_required: true
  - test: $BITRISE_TEST_APK_PATH
    opts:
      title: "Test APK path"
      summary: "The path to the test APK that contains instrumentation tests."
      description: |
        The path to the test APK that contains instrumentation tests.

        You can easily generate the test APK by running the [android-build-for-ui-testing](https://bitrise.io/integrations/steps/android-build-for-ui-testing) Step before this Step. In this case, the test APK path is exported under the `$BITRISE_TEST_APK_PATH` environment variable.
      is_expand: true
      is_required: true
  - num_shards: 1
    opts:
      title: "Number of test shards"
      summary: "Tests are split evenly by count across shards and run in parallel."
      description: |
        Tests are split evenly by count across shards and run in parallel.

        In general, the more shards you use, the faster your total test run time will be. Make sure not to set this count to be bigger than your actual test count.
  - device:
    opts:
      title: "Device configuration"
      summary: "Device configuration where to run tests"
      description: |
        Device configuration where to run tests.

        This is only required when you don't want to run tests on the default emulator configuration.

        The value of this parameter must be a list of key=value pairs where supported keys are:

        -  `model`: device model to use, possible values [`Pixel2`, `NexusLowRes`]
        -  `version`: API version to use

        For example, to test on an low res MDPI device with API 23 specify `model=NexusLowRes,version=23`
  - use_orchestrator: "yes"
    opts:
      title: "Use Android Test Orchestrator"
      value_options:
        - "yes"
        - "no"
  - clear_package_data: "yes"
    opts:
      title: "Clear package data between runs"
      summary: "Only applicable when using Android Test Orchestrator"
      value_options:
        - "yes"
        - "no"
  - with_coverage: "no"
    opts:
      title: "Collect code coverage data while executing the test"
      value_options:
        - "yes"
        - "no"
  - outputs_dir: $BITRISE_TEST_RESULT_DIR
    opts:
      title: "Output path where test run outputs (junit XML, logcat, files) will be stored."
      summary: "Using $BITRISE_TEST_RESULT_DIR here will make sure that they are also available under the Test Reports view"
  - additional_apks:
    opts:
      title: "Additional APKs to install"
      summary: "A comma separated list of additional APKs to install, in addition to those being directly tested."
  - environment_variables:
    opts:
      title: "Test extra options"
      summary: "Extra options are passed as extra options to the `am instrument` command."
      description: |
        Comma separated list of key=value pairs that are passed as extra options to the `am instrument` command.

        Some common examples of supported extras can be found [here](https://developer.android.com/studio/test/command-line#AMOptionsSyntax)

        Example use-cases:
          * Run second shard out of 3 shards: `numShards=3,shardIndex=1`
          * Run tests in a specific class: `class=com.example.app.MyTestClass`
  - directories_to_pull:
    opts:
      title: "Pull additional directories"
      summary: "Pull these directories from the emulator into the output path"
      description: |
        Comma separated directories that should be pulled from the emulator and that will be stored in the output path together with tests results.


outputs:
  - EMULATORWTF_TEST_RESULT_DIR:
    opts:
      title: "Output path where test run outputs (junit XML, logcat, files) are stored"
